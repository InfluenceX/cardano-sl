{-# LANGUAGE OverloadedLists #-}
{-# LANGUAGE RankNTypes      #-}

-- | Specification of 'Pos.Chain.Block.VAR'.

module Test.Pos.Block.Logic.VarSpec
       ( spec
       , runTest
       ) where

import           Universum hiding ((<>))

import qualified Prelude

import           Control.Monad.Random.Strict (MonadRandom (..), RandomGen,
                     evalRandT, uniform)
import qualified Data.HashMap.Strict as HM
import qualified Data.HashSet as HS
import           Data.List (span)
import           Data.List.NonEmpty (NonEmpty ((:|)))
import qualified Data.List.NonEmpty as NE
import qualified Data.Ratio as Ratio
import           Data.Semigroup ((<>))
import           Test.Hspec (Spec, beforeAll_, describe, hspec)
import           Test.Hspec.QuickCheck (modifyMaxSuccess)
import           Test.QuickCheck.Gen (Gen (MkGen))
import           Test.QuickCheck.Monadic (assert, pick, pre)
import           Test.QuickCheck.Random (QCGen)

import           Cardano.Crypto.Wallet

import           Pos.Chain.Block
import           Pos.Chain.Delegation
import           Pos.Chain.Genesis as Genesis
import           Pos.Chain.Ssc
import           Pos.Chain.Txp
import           Pos.Chain.Update
import           Pos.Core.Attributes
import           Pos.Core (ProtocolConstants (..), pcBlkSecurityParam)
import           Pos.Core.Common
import           Pos.Core.Chrono (NE, NewestFirst (..), OldestFirst (..),
                     nonEmptyNewestFirst, nonEmptyOldestFirst,
                     splitAtNewestFirst, toNewestFirst, _NewestFirst)
import           Pos.Core.Slotting
import           Pos.Core.Merkle
import           Pos.Crypto
import           Pos.DB.Block (verifyAndApplyBlocks, verifyBlocksPrefix)
import           Pos.DB.Pure (dbPureDump)

import           Pos.Generator.BlockEvent
import           Pos.Generator.BlockEvent.DSL (BlockApplyResult (..),
                     BlockEventGenT, BlockRollbackFailure (..),
                     BlockRollbackResult (..), BlockScenario,
                     BlockScenario' (..), Path, byChance,
                     emitBlockApply, emitBlockRollback,
                     enrichWithSnapshotChecking, pathSequence,
                     runBlockEventGenT)
import qualified Pos.GState as GS
import           Pos.Launcher (HasConfigurations)
import           Pos.Util.Wlog (setupTestLogging)

import           Test.Pos.Block.Logic.Event (BlockScenarioResult (..),
                     DbNotEquivalentToSnapshot (..), runBlockScenario)
import           Test.Pos.Block.Logic.Mode (BlockProperty, BlockTestMode)
import           Test.Pos.Block.Logic.Util (EnableTxPayload (..),
                     InplaceDB (..), bpGenBlock, bpGenBlocks,
                     bpGoToArbitraryState, getAllSecrets, satisfySlotCheck)
import           Test.Pos.Block.Property (blockPropertySpec)
import           Test.Pos.Configuration (HasStaticConfigurations,
                     withStaticConfigurations)
import           Test.Pos.Util.QuickCheck.Property (splitIntoChunks,
                     stopProperty)

-- stack test cardano-sl --fast --test-arguments "-m Test.Pos.Chain.Block.Var"
spec :: Spec
-- Unfortunatelly, blocks generation is quite slow nowdays.
-- See CSL-1382.
spec = beforeAll_ setupTestLogging $ withStaticConfigurations $ \txpConfig _ ->
    describe "Block.Logic.VAR" $ modifyMaxSuccess (min 4) $ do
        describe "verifyBlocksPrefix" $ verifyBlocksPrefixSpec txpConfig
        describe "verifyAndApplyBlocks" $ verifyAndApplyBlocksSpec txpConfig
        describe "applyBlocks" applyBlocksSpec
        describe "Block.Event" $ do
            describe "Successful sequence" $ blockEventSuccessSpec txpConfig
            describe "Apply through epoch" $ applyThroughEpochSpec txpConfig 0
            describe "Apply through epoch" $ applyThroughEpochSpec txpConfig 4
            describe "Fork - short" $ singleForkSpec txpConfig ForkShort
            describe "Fork - medium" $ singleForkSpec txpConfig ForkMedium
            describe "Fork - deep" $ singleForkSpec txpConfig ForkDeep

runTest :: IO ()
runTest = do
    setupTestLogging
    withStaticConfigurations $ \txpConfig _ -> hspec $
        describe "Erik: Successful sequence" $
            modifyMaxSuccess (const 1) . blockPropertySpec blockEventSuccessDesc $ \genesisConfig -> do

                runBlockScenarioAndVerify genesisConfig txpConfig myScenario

  where
    blockEventSuccessDesc =
        "a sequence of interleaved block applications and rollbacks " <>
        "results in the original state of the blockchain"

-- It took be the whole damn day (much more than 8 hours) to get to a point where the following
-- static scenario could be compiled and run.
-- Unfortunately, that is not enough. I *think* the _gbhPrevBlock hash is wrong. It should (maybe)
-- come from the genesisConfig.
-- Anyway, its 9pm here and i am cooked.


myScenario :: BlockScenario
myScenario = BlockScenario
    [ BlkEvApply (BlockEventApply {_beaInput = OldestFirst {getOldestFirst = (Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "92ac892a7f77c342bafeba5f68e8dbafcc792ef582ec00f77cc03afaa645e3ff", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 0}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "D\vd\145\252\204'\200\200\215\173\DLE\187\ETB\SOH\246\ETB\164\NULv\203\DC2o\224\129o\t6B6\RSQ", xpubChaincode = ChainCode " d,\221\ETX\rl\243\SO\136\144?D`k_,6\248\185F`=\135\173R\181\228\RSXM\236"}), _mcdDifficulty = ChainDifficulty (BlockCount 1), _mcdSignature = BlockSignature (Signature (mkXSignature ";\NAK\f~-\206~\177\187\DC1`\212\180\&4\174\220\154z\253\248\DC1#\150\223\225o\221V('\131\a^'\210\186\198\155c6$\t\161P+\239=\149R\247\246\158\162\221\134+\218\218\166Q\187\131\137\ACK"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}) :| []}, _beaOutValid = BlockApplySuccess})
    , BlkEvSnap (SnapshotSave "92ce6c1a287689fee1dc44559bd76a9b20fb90290e8cd94a36ff197e49cd4519")
    , BlkEvApply (BlockEventApply {_beaInput = OldestFirst {getOldestFirst = (Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "92ce6c1a287689fee1dc44559bd76a9b20fb90290e8cd94a36ff197e49cd4519", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 1}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "U\" mW\134U5\169\US\166\172S\RS\137\165\223\179\185)n1Pdd\t(\236\193\235{\222", xpubChaincode = ChainCode "\FS\235\221qJNZ\v\222]\229\197\239K\164d%\223AC2@\149\227\&1\230\191%Y\151>h"}), _mcdDifficulty = ChainDifficulty (BlockCount 2), _mcdSignature = BlockSignature (Signature (mkXSignature "\229\174\SO\219\204\CAN\137\255\150\144\196m\DC44]S\230\161\245\236\197\&2\156\243=\128\STX\225\\A.Z\US\255\228\144\181\&2H\182.\233\208\SOH\191\193/\EOT\CAN\139\195\231<\178\175\DLE\ETBh\248\DC1\197\187#\b"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}) :| [(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "f7a2002f43b59fc6ee0a0c55cce4037bedc8a1d270f3b2c49e5ac6fa4bd8b8db", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 2}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "\163K\219;\187\128\205\&7M\180\233\203\168\176\a\250\144I\200\240;\191@A|c\151\237\200\228\136\234", xpubChaincode = ChainCode "b`\240\t\229\&7\201\153\137\RS\138\159\221\231\242\227\166\184\SO\130\211\183\223\176*\ETBn\192\154\166\ve"}), _mcdDifficulty = ChainDifficulty (BlockCount 3), _mcdSignature = BlockSignature (Signature (mkXSignature "KK\SO\239\238u\191\&6\189\149-\134\173h\147\221\130\130\GS\255\144\153\214D\227\218\205S\224\139\v$\GS\b\135G\162\249`\EM\DC2\155\163\r\222N\221\196\188\181(_Bz\213\STX5\176YB\197\&83\ACK"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}),(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "a00de5f8a4a7f4b76503b113cf4a3eda98dde4f31e8a3f7a8451dab7eadae17a", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 3}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "\235\159\t\234\&1\163\SI\129\NUL\DC4\217\154\172\228Qk4&\236x=\233\225^\SI\213\US\137\171\254\222\216", xpubChaincode = ChainCode "3\DC3\237\173v#\159\ESC\176\&6Q1:\STXa\240*\246\173/\196\b\208\159\137\247\SO0g[\US\SOH"}), _mcdDifficulty = ChainDifficulty (BlockCount 4), _mcdSignature = BlockSignature (Signature (mkXSignature "\NAK\148\247-\252u\216\145\r\136\RS\134\195>\184\242!\194\217\227O\147\&8\145E|V#\\\SOH\NAK~!vM\197O\166C\131\190H<\167\192\143\160\176\204\254\186\241\203(\188U\216\DC3\246\158\&4\SYN\238\NUL"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}),(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "c5073e2d835fc7915b07a5b2734476670e5f112fd6fa023e2ab50be95030f38d", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 4}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "D\vd\145\252\204'\200\200\215\173\DLE\187\ETB\SOH\246\ETB\164\NULv\203\DC2o\224\129o\t6B6\RSQ", xpubChaincode = ChainCode " d,\221\ETX\rl\243\SO\136\144?D`k_,6\248\185F`=\135\173R\181\228\RSXM\236"}), _mcdDifficulty = ChainDifficulty (BlockCount 5), _mcdSignature = BlockSignature (Signature (mkXSignature "\228\152\178#c\ETBJ\250G~\239\195\203\187}\195}\216\DC1$\243P\205_\151\198\t\DC4\141.\161\216\204\166\195AX\ENQd\249\EOT\151\238A\209-\155\EMp\202a$\185\183^\179]\217\183eB\210\&1\STX"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}),(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "1f0fc6d5efa3d2e1217f6307ae3046b1760ba19a491e6ec58c9da039f46f14bc", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 5}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "Q#a\162\242\v\167\232\183\241(\182\187wn\250}q\SI\248\217\NAK\168\248\195\CAN\EM\222\181\222Cp", xpubChaincode = ChainCode "</\162\133\146\246\US\EM\222\232Tf\211\212\229\249|\SYN\146\255-\138\DC2\151\\#\210\213\150;`\200"}), _mcdDifficulty = ChainDifficulty (BlockCount 6), _mcdSignature = BlockSignature (Signature (mkXSignature "Tl\f\r\146\169\190~\218\146\ETX\170\221\144J\r\178`k\175\128\SUB\154d\165\139\243~\197\159\&6=\167\203nSMY\250\SO\DC3f\207\&4\253l\DEL\189?*\129\&0Kb\255c\148\156L\219HoW\SOH"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}),(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "b443dc66e35338b0e1c9bbbf39fc12ea47019c6da01a6581a3bd0375828efc74", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 6}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "Q#a\162\242\v\167\232\183\241(\182\187wn\250}q\SI\248\217\NAK\168\248\195\CAN\EM\222\181\222Cp", xpubChaincode = ChainCode "</\162\133\146\246\US\EM\222\232Tf\211\212\229\249|\SYN\146\255-\138\DC2\151\\#\210\213\150;`\200"}), _mcdDifficulty = ChainDifficulty (BlockCount 7), _mcdSignature = BlockSignature (Signature (mkXSignature "\GS#\179\&4\184\180\239E\GS\187(\144R\165\186\141SO\168yK\199\&5\f\131!\234\224\146\246\205\n\EM\239d}\DEL\246\&5\182\172\&1\139L\159\234O\US\198=\DC4)\229v\177\rYik\163\223t\137\f"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}),(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "0e029df8909869a16647380725a8e80071f8aa51a12f6ea45037a9ae8edeb4c4", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 7}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "\NAK/\195\177>\250\181\186$\210\SOH\RS\154U:\199E\161\254\194\183\185?\248\136\165\237&\231\186\DC1\131", xpubChaincode = ChainCode "<\245\149\144*Z\v\192!\183\138F\133`\EOT2\206\216\221\132\213;\130\211\229i\139J\166q\EM\253"}), _mcdDifficulty = ChainDifficulty (BlockCount 8), _mcdSignature = BlockSignature (Signature (mkXSignature "Bs\216\ETB\227\&1\253\GS\248\183\243\194\CAN\DC3\159\177\207\230$\132\SOH\SYNE\221z\207\194\185\202\&4u2\194\218\144,q\171\220\184\180A\\\249\129C\164\GS\174C\129\ETX9\247\226\f\191\219r\166F\149\138\n"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}),(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "5c9474215c5a38f6e2cc6cef9ac4d08a3672a38a70c6377ade92ccaf09cc490f", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 8}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "D\vd\145\252\204'\200\200\215\173\DLE\187\ETB\SOH\246\ETB\164\NULv\203\DC2o\224\129o\t6B6\RSQ", xpubChaincode = ChainCode " d,\221\ETX\rl\243\SO\136\144?D`k_,6\248\185F`=\135\173R\181\228\RSXM\236"}), _mcdDifficulty = ChainDifficulty (BlockCount 9), _mcdSignature = BlockSignature (Signature (mkXSignature "\166\DC3\239\RS0\198\229$\135:O\168\166\&8h#3R\247\US\233\253\181=\182\252\235\217\171\205\&4\153\155\176\225__<*\US\192J\166R\178\&5\153\DC1\239kp=\191}\165\176z=j)\245\STX<\ENQ"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}),(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "348c506169dd821ff9ef8efaf7ec568be29102c4f7268a17d5d153146d5ea545", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 9}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "\162\ESC\NAK\221\ESCD\DC4=cx\236\202\192\219\165\152\196a\EOTm\145-\209q=\183\DC2\EM\185&'\236", xpubChaincode = ChainCode "]\255g\SO\NUL\180\131j\DC3\229\201\209Q\141\221y\176}\SI\144\241?\205;\207\226#|\192\154\255\132"}), _mcdDifficulty = ChainDifficulty (BlockCount 10), _mcdSignature = BlockSignature (Signature (mkXSignature "\191?4\GSb\235TN\DLE\CAN\"\GS\128v\\?=y(d\SO\234\EM\137\151\218\bn\231`T0%\SYN3\CAN4^\181\v1p'HM\ESC\242mM\DEL\NUL\233{\220\251qh\CAN\EM\179\188\211y\NUL"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}})]}, _beaOutValid = BlockApplySuccess})
    , BlkEvSnap (SnapshotSave "ffb7e4d23652e1127ec362bcc6e454e9cd1fe7e9c0f08f62e4612f0d47cf371a")
    , BlkEvRollback (BlockEventRollback {_berInput = NewestFirst {getNewestFirst = (Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "348c506169dd821ff9ef8efaf7ec568be29102c4f7268a17d5d153146d5ea545", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 9}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "\162\ESC\NAK\221\ESCD\DC4=cx\236\202\192\219\165\152\196a\EOTm\145-\209q=\183\DC2\EM\185&'\236", xpubChaincode = ChainCode "]\255g\SO\NUL\180\131j\DC3\229\201\209Q\141\221y\176}\SI\144\241?\205;\207\226#|\192\154\255\132"}), _mcdDifficulty = ChainDifficulty (BlockCount 10), _mcdSignature = BlockSignature (Signature (mkXSignature "\191?4\GSb\235TN\DLE\CAN\"\GS\128v\\?=y(d\SO\234\EM\137\151\218\bn\231`T0%\SYN3\CAN4^\181\v1p'HM\ESC\242mM\DEL\NUL\233{\220\251qh\CAN\EM\179\188\211y\NUL"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}) :| [(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "5c9474215c5a38f6e2cc6cef9ac4d08a3672a38a70c6377ade92ccaf09cc490f", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 8}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "D\vd\145\252\204'\200\200\215\173\DLE\187\ETB\SOH\246\ETB\164\NULv\203\DC2o\224\129o\t6B6\RSQ", xpubChaincode = ChainCode " d,\221\ETX\rl\243\SO\136\144?D`k_,6\248\185F`=\135\173R\181\228\RSXM\236"}), _mcdDifficulty = ChainDifficulty (BlockCount 9), _mcdSignature = BlockSignature (Signature (mkXSignature "\166\DC3\239\RS0\198\229$\135:O\168\166\&8h#3R\247\US\233\253\181=\182\252\235\217\171\205\&4\153\155\176\225__<*\US\192J\166R\178\&5\153\DC1\239kp=\191}\165\176z=j)\245\STX<\ENQ"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}),(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "0e029df8909869a16647380725a8e80071f8aa51a12f6ea45037a9ae8edeb4c4", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 7}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "\NAK/\195\177>\250\181\186$\210\SOH\RS\154U:\199E\161\254\194\183\185?\248\136\165\237&\231\186\DC1\131", xpubChaincode = ChainCode "<\245\149\144*Z\v\192!\183\138F\133`\EOT2\206\216\221\132\213;\130\211\229i\139J\166q\EM\253"}), _mcdDifficulty = ChainDifficulty (BlockCount 8), _mcdSignature = BlockSignature (Signature (mkXSignature "Bs\216\ETB\227\&1\253\GS\248\183\243\194\CAN\DC3\159\177\207\230$\132\SOH\SYNE\221z\207\194\185\202\&4u2\194\218\144,q\171\220\184\180A\\\249\129C\164\GS\174C\129\ETX9\247\226\f\191\219r\166F\149\138\n"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}),(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "b443dc66e35338b0e1c9bbbf39fc12ea47019c6da01a6581a3bd0375828efc74", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 6}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "Q#a\162\242\v\167\232\183\241(\182\187wn\250}q\SI\248\217\NAK\168\248\195\CAN\EM\222\181\222Cp", xpubChaincode = ChainCode "</\162\133\146\246\US\EM\222\232Tf\211\212\229\249|\SYN\146\255-\138\DC2\151\\#\210\213\150;`\200"}), _mcdDifficulty = ChainDifficulty (BlockCount 7), _mcdSignature = BlockSignature (Signature (mkXSignature "\GS#\179\&4\184\180\239E\GS\187(\144R\165\186\141SO\168yK\199\&5\f\131!\234\224\146\246\205\n\EM\239d}\DEL\246\&5\182\172\&1\139L\159\234O\US\198=\DC4)\229v\177\rYik\163\223t\137\f"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}),(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "1f0fc6d5efa3d2e1217f6307ae3046b1760ba19a491e6ec58c9da039f46f14bc", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 5}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "Q#a\162\242\v\167\232\183\241(\182\187wn\250}q\SI\248\217\NAK\168\248\195\CAN\EM\222\181\222Cp", xpubChaincode = ChainCode "</\162\133\146\246\US\EM\222\232Tf\211\212\229\249|\SYN\146\255-\138\DC2\151\\#\210\213\150;`\200"}), _mcdDifficulty = ChainDifficulty (BlockCount 6), _mcdSignature = BlockSignature (Signature (mkXSignature "Tl\f\r\146\169\190~\218\146\ETX\170\221\144J\r\178`k\175\128\SUB\154d\165\139\243~\197\159\&6=\167\203nSMY\250\SO\DC3f\207\&4\253l\DEL\189?*\129\&0Kb\255c\148\156L\219HoW\SOH"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}),(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "c5073e2d835fc7915b07a5b2734476670e5f112fd6fa023e2ab50be95030f38d", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 4}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "D\vd\145\252\204'\200\200\215\173\DLE\187\ETB\SOH\246\ETB\164\NULv\203\DC2o\224\129o\t6B6\RSQ", xpubChaincode = ChainCode " d,\221\ETX\rl\243\SO\136\144?D`k_,6\248\185F`=\135\173R\181\228\RSXM\236"}), _mcdDifficulty = ChainDifficulty (BlockCount 5), _mcdSignature = BlockSignature (Signature (mkXSignature "\228\152\178#c\ETBJ\250G~\239\195\203\187}\195}\216\DC1$\243P\205_\151\198\t\DC4\141.\161\216\204\166\195AX\ENQd\249\EOT\151\238A\209-\155\EMp\202a$\185\183^\179]\217\183eB\210\&1\STX"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}),(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "a00de5f8a4a7f4b76503b113cf4a3eda98dde4f31e8a3f7a8451dab7eadae17a", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 3}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "\235\159\t\234\&1\163\SI\129\NUL\DC4\217\154\172\228Qk4&\236x=\233\225^\SI\213\US\137\171\254\222\216", xpubChaincode = ChainCode "3\DC3\237\173v#\159\ESC\176\&6Q1:\STXa\240*\246\173/\196\b\208\159\137\247\SO0g[\US\SOH"}), _mcdDifficulty = ChainDifficulty (BlockCount 4), _mcdSignature = BlockSignature (Signature (mkXSignature "\NAK\148\247-\252u\216\145\r\136\RS\134\195>\184\242!\194\217\227O\147\&8\145E|V#\\\SOH\NAK~!vM\197O\166C\131\190H<\167\192\143\160\176\204\254\186\241\203(\188U\216\DC3\246\158\&4\SYN\238\NUL"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}),(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "f7a2002f43b59fc6ee0a0c55cce4037bedc8a1d270f3b2c49e5ac6fa4bd8b8db", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 2}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "\163K\219;\187\128\205\&7M\180\233\203\168\176\a\250\144I\200\240;\191@A|c\151\237\200\228\136\234", xpubChaincode = ChainCode "b`\240\t\229\&7\201\153\137\RS\138\159\221\231\242\227\166\184\SO\130\211\183\223\176*\ETBn\192\154\166\ve"}), _mcdDifficulty = ChainDifficulty (BlockCount 3), _mcdSignature = BlockSignature (Signature (mkXSignature "KK\SO\239\238u\191\&6\189\149-\134\173h\147\221\130\130\GS\255\144\153\214D\227\218\205S\224\139\v$\GS\b\135G\162\249`\EM\DC2\155\163\r\222N\221\196\188\181(_Bz\213\STX5\176YB\197\&83\ACK"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}),(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "92ce6c1a287689fee1dc44559bd76a9b20fb90290e8cd94a36ff197e49cd4519", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 1}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "U\" mW\134U5\169\US\166\172S\RS\137\165\223\179\185)n1Pdd\t(\236\193\235{\222", xpubChaincode = ChainCode "\FS\235\221qJNZ\v\222]\229\197\239K\164d%\223AC2@\149\227\&1\230\191%Y\151>h"}), _mcdDifficulty = ChainDifficulty (BlockCount 2), _mcdSignature = BlockSignature (Signature (mkXSignature "\229\174\SO\219\204\CAN\137\255\150\144\196m\DC44]S\230\161\245\236\197\&2\156\243=\128\STX\225\\A.Z\US\255\228\144\181\&2H\182.\233\208\SOH\191\193/\EOT\CAN\139\195\231<\178\175\DLE\ETBh\248\DC1\197\187#\b"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}})]}, _berOutValid = BlockRollbackSuccess})
    , BlkEvSnap (SnapshotEq "92ce6c1a287689fee1dc44559bd76a9b20fb90290e8cd94a36ff197e49cd4519")
    , BlkEvApply (BlockEventApply {_beaInput = OldestFirst {getOldestFirst = (Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "92ce6c1a287689fee1dc44559bd76a9b20fb90290e8cd94a36ff197e49cd4519", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 1}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "U\" mW\134U5\169\US\166\172S\RS\137\165\223\179\185)n1Pdd\t(\236\193\235{\222", xpubChaincode = ChainCode "\FS\235\221qJNZ\v\222]\229\197\239K\164d%\223AC2@\149\227\&1\230\191%Y\151>h"}), _mcdDifficulty = ChainDifficulty (BlockCount 2), _mcdSignature = BlockSignature (Signature (mkXSignature "\229\174\SO\219\204\CAN\137\255\150\144\196m\DC44]S\230\161\245\236\197\&2\156\243=\128\STX\225\\A.Z\US\255\228\144\181\&2H\182.\233\208\SOH\191\193/\EOT\CAN\139\195\231<\178\175\DLE\ETBh\248\DC1\197\187#\b"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}) :| [(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "f7a2002f43b59fc6ee0a0c55cce4037bedc8a1d270f3b2c49e5ac6fa4bd8b8db", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 2}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "\163K\219;\187\128\205\&7M\180\233\203\168\176\a\250\144I\200\240;\191@A|c\151\237\200\228\136\234", xpubChaincode = ChainCode "b`\240\t\229\&7\201\153\137\RS\138\159\221\231\242\227\166\184\SO\130\211\183\223\176*\ETBn\192\154\166\ve"}), _mcdDifficulty = ChainDifficulty (BlockCount 3), _mcdSignature = BlockSignature (Signature (mkXSignature "KK\SO\239\238u\191\&6\189\149-\134\173h\147\221\130\130\GS\255\144\153\214D\227\218\205S\224\139\v$\GS\b\135G\162\249`\EM\DC2\155\163\r\222N\221\196\188\181(_Bz\213\STX5\176YB\197\&83\ACK"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}})]}, _beaOutValid = BlockApplySuccess})
    , BlkEvSnap (SnapshotSave "a00de5f8a4a7f4b76503b113cf4a3eda98dde4f31e8a3f7a8451dab7eadae17a")
    , BlkEvApply (BlockEventApply {_beaInput = OldestFirst {getOldestFirst = (Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "a00de5f8a4a7f4b76503b113cf4a3eda98dde4f31e8a3f7a8451dab7eadae17a", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 3}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "\235\159\t\234\&1\163\SI\129\NUL\DC4\217\154\172\228Qk4&\236x=\233\225^\SI\213\US\137\171\254\222\216", xpubChaincode = ChainCode "3\DC3\237\173v#\159\ESC\176\&6Q1:\STXa\240*\246\173/\196\b\208\159\137\247\SO0g[\US\SOH"}), _mcdDifficulty = ChainDifficulty (BlockCount 4), _mcdSignature = BlockSignature (Signature (mkXSignature "\NAK\148\247-\252u\216\145\r\136\RS\134\195>\184\242!\194\217\227O\147\&8\145E|V#\\\SOH\NAK~!vM\197O\166C\131\190H<\167\192\143\160\176\204\254\186\241\203(\188U\216\DC3\246\158\&4\SYN\238\NUL"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}) :| [(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "c5073e2d835fc7915b07a5b2734476670e5f112fd6fa023e2ab50be95030f38d", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 4}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "D\vd\145\252\204'\200\200\215\173\DLE\187\ETB\SOH\246\ETB\164\NULv\203\DC2o\224\129o\t6B6\RSQ", xpubChaincode = ChainCode " d,\221\ETX\rl\243\SO\136\144?D`k_,6\248\185F`=\135\173R\181\228\RSXM\236"}), _mcdDifficulty = ChainDifficulty (BlockCount 5), _mcdSignature = BlockSignature (Signature (mkXSignature "\228\152\178#c\ETBJ\250G~\239\195\203\187}\195}\216\DC1$\243P\205_\151\198\t\DC4\141.\161\216\204\166\195AX\ENQd\249\EOT\151\238A\209-\155\EMp\202a$\185\183^\179]\217\183eB\210\&1\STX"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}})]}, _beaOutValid = BlockApplySuccess})
    , BlkEvApply (BlockEventApply {_beaInput = OldestFirst {getOldestFirst = (Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "1f0fc6d5efa3d2e1217f6307ae3046b1760ba19a491e6ec58c9da039f46f14bc", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 5}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "Q#a\162\242\v\167\232\183\241(\182\187wn\250}q\SI\248\217\NAK\168\248\195\CAN\EM\222\181\222Cp", xpubChaincode = ChainCode "</\162\133\146\246\US\EM\222\232Tf\211\212\229\249|\SYN\146\255-\138\DC2\151\\#\210\213\150;`\200"}), _mcdDifficulty = ChainDifficulty (BlockCount 6), _mcdSignature = BlockSignature (Signature (mkXSignature "Tl\f\r\146\169\190~\218\146\ETX\170\221\144J\r\178`k\175\128\SUB\154d\165\139\243~\197\159\&6=\167\203nSMY\250\SO\DC3f\207\&4\253l\DEL\189?*\129\&0Kb\255c\148\156L\219HoW\SOH"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}) :| [(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "b443dc66e35338b0e1c9bbbf39fc12ea47019c6da01a6581a3bd0375828efc74", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 6}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "Q#a\162\242\v\167\232\183\241(\182\187wn\250}q\SI\248\217\NAK\168\248\195\CAN\EM\222\181\222Cp", xpubChaincode = ChainCode "</\162\133\146\246\US\EM\222\232Tf\211\212\229\249|\SYN\146\255-\138\DC2\151\\#\210\213\150;`\200"}), _mcdDifficulty = ChainDifficulty (BlockCount 7), _mcdSignature = BlockSignature (Signature (mkXSignature "\GS#\179\&4\184\180\239E\GS\187(\144R\165\186\141SO\168yK\199\&5\f\131!\234\224\146\246\205\n\EM\239d}\DEL\246\&5\182\172\&1\139L\159\234O\US\198=\DC4)\229v\177\rYik\163\223t\137\f"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}),(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "0e029df8909869a16647380725a8e80071f8aa51a12f6ea45037a9ae8edeb4c4", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 7}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "\NAK/\195\177>\250\181\186$\210\SOH\RS\154U:\199E\161\254\194\183\185?\248\136\165\237&\231\186\DC1\131", xpubChaincode = ChainCode "<\245\149\144*Z\v\192!\183\138F\133`\EOT2\206\216\221\132\213;\130\211\229i\139J\166q\EM\253"}), _mcdDifficulty = ChainDifficulty (BlockCount 8), _mcdSignature = BlockSignature (Signature (mkXSignature "Bs\216\ETB\227\&1\253\GS\248\183\243\194\CAN\DC3\159\177\207\230$\132\SOH\SYNE\221z\207\194\185\202\&4u2\194\218\144,q\171\220\184\180A\\\249\129C\164\GS\174C\129\ETX9\247\226\f\191\219r\166F\149\138\n"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}})]}, _beaOutValid = BlockApplySuccess})
    , BlkEvApply (BlockEventApply {_beaInput = OldestFirst {getOldestFirst = (Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "5c9474215c5a38f6e2cc6cef9ac4d08a3672a38a70c6377ade92ccaf09cc490f", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 8}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "D\vd\145\252\204'\200\200\215\173\DLE\187\ETB\SOH\246\ETB\164\NULv\203\DC2o\224\129o\t6B6\RSQ", xpubChaincode = ChainCode " d,\221\ETX\rl\243\SO\136\144?D`k_,6\248\185F`=\135\173R\181\228\RSXM\236"}), _mcdDifficulty = ChainDifficulty (BlockCount 9), _mcdSignature = BlockSignature (Signature (mkXSignature "\166\DC3\239\RS0\198\229$\135:O\168\166\&8h#3R\247\US\233\253\181=\182\252\235\217\171\205\&4\153\155\176\225__<*\US\192J\166R\178\&5\153\DC1\239kp=\191}\165\176z=j)\245\STX<\ENQ"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}) :| [(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "348c506169dd821ff9ef8efaf7ec568be29102c4f7268a17d5d153146d5ea545", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 9}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "\162\ESC\NAK\221\ESCD\DC4=cx\236\202\192\219\165\152\196a\EOTm\145-\209q=\183\DC2\EM\185&'\236", xpubChaincode = ChainCode "]\255g\SO\NUL\180\131j\DC3\229\201\209Q\141\221y\176}\SI\144\241?\205;\207\226#|\192\154\255\132"}), _mcdDifficulty = ChainDifficulty (BlockCount 10), _mcdSignature = BlockSignature (Signature (mkXSignature "\191?4\GSb\235TN\DLE\CAN\"\GS\128v\\?=y(d\SO\234\EM\137\151\218\bn\231`T0%\SYN3\CAN4^\181\v1p'HM\ESC\242mM\DEL\NUL\233{\220\251qh\CAN\EM\179\188\211y\NUL"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}})]}, _beaOutValid = BlockApplySuccess})
    , BlkEvSnap (SnapshotEq "ffb7e4d23652e1127ec362bcc6e454e9cd1fe7e9c0f08f62e4612f0d47cf371a")
    , BlkEvRollback (BlockEventRollback {_berInput = NewestFirst {getNewestFirst = (Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "348c506169dd821ff9ef8efaf7ec568be29102c4f7268a17d5d153146d5ea545", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 9}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "\162\ESC\NAK\221\ESCD\DC4=cx\236\202\192\219\165\152\196a\EOTm\145-\209q=\183\DC2\EM\185&'\236", xpubChaincode = ChainCode "]\255g\SO\NUL\180\131j\DC3\229\201\209Q\141\221y\176}\SI\144\241?\205;\207\226#|\192\154\255\132"}), _mcdDifficulty = ChainDifficulty (BlockCount 10), _mcdSignature = BlockSignature (Signature (mkXSignature "\191?4\GSb\235TN\DLE\CAN\"\GS\128v\\?=y(d\SO\234\EM\137\151\218\bn\231`T0%\SYN3\CAN4^\181\v1p'HM\ESC\242mM\DEL\NUL\233{\220\251qh\CAN\EM\179\188\211y\NUL"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}) :| [(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "5c9474215c5a38f6e2cc6cef9ac4d08a3672a38a70c6377ade92ccaf09cc490f", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 8}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "D\vd\145\252\204'\200\200\215\173\DLE\187\ETB\SOH\246\ETB\164\NULv\203\DC2o\224\129o\t6B6\RSQ", xpubChaincode = ChainCode " d,\221\ETX\rl\243\SO\136\144?D`k_,6\248\185F`=\135\173R\181\228\RSXM\236"}), _mcdDifficulty = ChainDifficulty (BlockCount 9), _mcdSignature = BlockSignature (Signature (mkXSignature "\166\DC3\239\RS0\198\229$\135:O\168\166\&8h#3R\247\US\233\253\181=\182\252\235\217\171\205\&4\153\155\176\225__<*\US\192J\166R\178\&5\153\DC1\239kp=\191}\165\176z=j)\245\STX<\ENQ"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}),(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "0e029df8909869a16647380725a8e80071f8aa51a12f6ea45037a9ae8edeb4c4", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 7}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "\NAK/\195\177>\250\181\186$\210\SOH\RS\154U:\199E\161\254\194\183\185?\248\136\165\237&\231\186\DC1\131", xpubChaincode = ChainCode "<\245\149\144*Z\v\192!\183\138F\133`\EOT2\206\216\221\132\213;\130\211\229i\139J\166q\EM\253"}), _mcdDifficulty = ChainDifficulty (BlockCount 8), _mcdSignature = BlockSignature (Signature (mkXSignature "Bs\216\ETB\227\&1\253\GS\248\183\243\194\CAN\DC3\159\177\207\230$\132\SOH\SYNE\221z\207\194\185\202\&4u2\194\218\144,q\171\220\184\180A\\\249\129C\164\GS\174C\129\ETX9\247\226\f\191\219r\166F\149\138\n"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}),(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "b443dc66e35338b0e1c9bbbf39fc12ea47019c6da01a6581a3bd0375828efc74", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 6}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "Q#a\162\242\v\167\232\183\241(\182\187wn\250}q\SI\248\217\NAK\168\248\195\CAN\EM\222\181\222Cp", xpubChaincode = ChainCode "</\162\133\146\246\US\EM\222\232Tf\211\212\229\249|\SYN\146\255-\138\DC2\151\\#\210\213\150;`\200"}), _mcdDifficulty = ChainDifficulty (BlockCount 7), _mcdSignature = BlockSignature (Signature (mkXSignature "\GS#\179\&4\184\180\239E\GS\187(\144R\165\186\141SO\168yK\199\&5\f\131!\234\224\146\246\205\n\EM\239d}\DEL\246\&5\182\172\&1\139L\159\234O\US\198=\DC4)\229v\177\rYik\163\223t\137\f"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}),(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "1f0fc6d5efa3d2e1217f6307ae3046b1760ba19a491e6ec58c9da039f46f14bc", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 5}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "Q#a\162\242\v\167\232\183\241(\182\187wn\250}q\SI\248\217\NAK\168\248\195\CAN\EM\222\181\222Cp", xpubChaincode = ChainCode "</\162\133\146\246\US\EM\222\232Tf\211\212\229\249|\SYN\146\255-\138\DC2\151\\#\210\213\150;`\200"}), _mcdDifficulty = ChainDifficulty (BlockCount 6), _mcdSignature = BlockSignature (Signature (mkXSignature "Tl\f\r\146\169\190~\218\146\ETX\170\221\144J\r\178`k\175\128\SUB\154d\165\139\243~\197\159\&6=\167\203nSMY\250\SO\DC3f\207\&4\253l\DEL\189?*\129\&0Kb\255c\148\156L\219HoW\SOH"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}),(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "c5073e2d835fc7915b07a5b2734476670e5f112fd6fa023e2ab50be95030f38d", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 4}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "D\vd\145\252\204'\200\200\215\173\DLE\187\ETB\SOH\246\ETB\164\NULv\203\DC2o\224\129o\t6B6\RSQ", xpubChaincode = ChainCode " d,\221\ETX\rl\243\SO\136\144?D`k_,6\248\185F`=\135\173R\181\228\RSXM\236"}), _mcdDifficulty = ChainDifficulty (BlockCount 5), _mcdSignature = BlockSignature (Signature (mkXSignature "\228\152\178#c\ETBJ\250G~\239\195\203\187}\195}\216\DC1$\243P\205_\151\198\t\DC4\141.\161\216\204\166\195AX\ENQd\249\EOT\151\238A\209-\155\EMp\202a$\185\183^\179]\217\183eB\210\&1\STX"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}}),(Right (GenericBlock {_gbHeader = GenericBlockHeader {_gbhProtocolMagicId = ProtocolMagicId {unProtocolMagicId = 0}, _gbhPrevBlock = mkAbstractHash "a00de5f8a4a7f4b76503b113cf4a3eda98dde4f31e8a3f7a8451dab7eadae17a", _gbhBodyProof = MainProof {mpTxProof = TxProof {txpNumber = 0, txpRoot = MerkleRoot {getMerkleRoot = mkAbstractHash "0e5751c026e543b2e8ab2eb06099daa1d1e5df47778f7787faab45cdf12fe3a8"}, txpWitnessesHash = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b"}, mpMpcProof = CommitmentsProof (mkAbstractHash "25777aca9e4a73d48fc73b4f961d345b06d4a6f349cb7916570d35537d53479f") (mkAbstractHash "d36a2619a672494604e11bb447cbcf5231e9f2ba25c2169177edc941bd50ad6c"), mpProxySKsProof = mkAbstractHash "afc0da64183bf2664f3d4eec7238d524ba607faeeab24fc100eb861dba69971b", mpUpdateProof = mkAbstractHash "4e66280cd94d591072349bec0a3090a53aa945562efb6d08d56e53654b0e4098"}, _gbhConsensus = MainConsensusData {_mcdSlot = SlotId {siEpoch = EpochIndex {getEpochIndex = 0}, siSlot = UnsafeLocalSlotIndex 3}, _mcdLeaderKey = PublicKey (XPub {xpubPublicKey = "\235\159\t\234\&1\163\SI\129\NUL\DC4\217\154\172\228Qk4&\236x=\233\225^\SI\213\US\137\171\254\222\216", xpubChaincode = ChainCode "3\DC3\237\173v#\159\ESC\176\&6Q1:\STXa\240*\246\173/\196\b\208\159\137\247\SO0g[\US\SOH"}), _mcdDifficulty = ChainDifficulty (BlockCount 4), _mcdSignature = BlockSignature (Signature (mkXSignature "\NAK\148\247-\252u\216\145\r\136\RS\134\195>\184\242!\194\217\227O\147\&8\145E|V#\\\SOH\NAK~!vM\197O\166C\131\190H<\167\192\143\160\176\204\254\186\241\203(\188U\216\DC3\246\158\&4\SYN\238\NUL"))}, _gbhExtra = MainExtraHeaderData {_mehBlockVersion = BlockVersion 0 0 0, _mehSoftwareVersion = SoftwareVersion (ApplicationName "meh") 0, _mehAttributes = mkAttributes (), _mehEBDataProof = mkAbstractHash "4ba92aa320c60acc9ad7b9a64f2eda55c4d2ec28e604faf186708b4f0c4e8edf"}}, _gbBody = MainBody {_mbTxPayload = UnsafeTxPayload {_txpTxs = [], _txpWitnesses = []}, _mbSscPayload = CommitmentsPayload (CommitmentsMap (HM.fromList [])) (UnsafeVssCertificatesMap (HM.fromList [])), _mbDlgPayload = UnsafeDlgPayload {getDlgPayload = []}, _mbUpdatePayload = UpdatePayload {upProposal = Nothing, upVotes = []}}, _gbExtra = MainExtraBodyData {_mebAttributes = mkAttributes ()}}),Undo {undoTx = [], undoDlg = DlgUndo {duPsks = [], duPrevEpochPosted = HS.fromList []}, undoUS = USUndo {unChangedBV = HM.fromList [], unLastAdoptedBV = Nothing, unChangedProps = HM.fromList [], unChangedSV = HM.fromList [], unChangedConfProps = HM.fromList [], unPrevProposers = Nothing, unSlottingData = Nothing}, undoSlog = SlogUndo {getSlogUndo = Nothing}})]}, _berOutValid = BlockRollbackSuccess})
    , BlkEvSnap (SnapshotEq "a00de5f8a4a7f4b76503b113cf4a3eda98dde4f31e8a3f7a8451dab7eadae17a")
    ]
  where
    mkXSignature :: ByteString -> XSignature
    mkXSignature bs =
        case xsignature bs of
            Left s -> Prelude.error $ "mkXSignature: " ++ s
            Right xs -> xs

    mkAbstractHash :: forall algo a. HashAlgorithm algo => Text -> AbstractHash algo a
    mkAbstractHash txt =
        case decodeAbstractHash txt of
            Left e -> error $ "mkAbstractHash" <> e
            Right ah -> ah

----------------------------------------------------------------------------
-- verifyBlocksPrefix
----------------------------------------------------------------------------

verifyBlocksPrefixSpec
    :: HasStaticConfigurations
    => TxpConfiguration
    -> Spec
verifyBlocksPrefixSpec txpConfig = do
    blockPropertySpec verifyEmptyMainBlockDesc
                      (flip verifyEmptyMainBlock txpConfig)
    blockPropertySpec verifyValidBlocksDesc
                      (flip verifyValidBlocks txpConfig)
  where
    verifyEmptyMainBlockDesc =
        "verification of consistent empty main block " <>
        "created by the leader of the 0-th slot " <>
        "always succeeds for initial GState"
    verifyValidBlocksDesc =
        "verification of (hopefully) valid blocks " <>
        "generated by the block generator " <>
        "always succeeds for GState for which these blocks where generated " <>
        "as long as all these blocks are from the same epoch"

verifyEmptyMainBlock :: HasConfigurations
                     => Genesis.Config
                     -> TxpConfiguration
                     -> BlockProperty ()
verifyEmptyMainBlock genesisConfig txpConfig = do
    emptyBlock <- fst <$> bpGenBlock genesisConfig
                                     txpConfig
                                     (EnableTxPayload False)
                                     (InplaceDB False)
    curSlot <- getCurrentSlot $ configEpochSlots genesisConfig
    whenLeftM (lift $ verifyBlocksPrefix genesisConfig curSlot (one emptyBlock))
        $ stopProperty
        . pretty

verifyValidBlocks
    :: HasConfigurations
    => Genesis.Config
    -> TxpConfiguration
    -> BlockProperty ()
verifyValidBlocks genesisConfig txpConfig = do
    bpGoToArbitraryState
    blocks <- map fst . toList <$> bpGenBlocks genesisConfig
                                              txpConfig
                                              Nothing
                                              (EnableTxPayload True)
                                              (InplaceDB False)
    pre (not $ null blocks)
    let blocksToVerify = OldestFirst $ case blocks of
            -- impossible because of precondition (see 'pre' above)
            [] -> error "verifyValidBlocks: impossible"
            (block0:otherBlocks) ->
                let (otherBlocks', _) = span isRight otherBlocks
                in block0 :| otherBlocks'

    verRes <- lift $ satisfySlotCheck blocksToVerify $ verifyBlocksPrefix
        genesisConfig
        Nothing
        blocksToVerify
    whenLeft verRes $ stopProperty . pretty

----------------------------------------------------------------------------
-- verifyAndApplyBlocks
----------------------------------------------------------------------------

verifyAndApplyBlocksSpec :: HasStaticConfigurations
                         => TxpConfiguration
                         -> Spec
verifyAndApplyBlocksSpec txpConfig =
    blockPropertySpec applyByOneOrAllAtOnceDesc $ \genesisConfig ->
        applyByOneOrAllAtOnce genesisConfig txpConfig (applier genesisConfig)
  where
    applier
        :: Genesis.Config
        -> OldestFirst NE Blund
        -> BlockTestMode ()
    applier genesisConfig blunds = do
        let blocks = map fst blunds
        -- we don't check current SlotId, because the applier is run twice
        -- and the check will fail the verification
        satisfySlotCheck blocks $ whenLeftM
            (verifyAndApplyBlocks genesisConfig txpConfig Nothing True blocks)
            throwM
    applyByOneOrAllAtOnceDesc =
        "verifying and applying blocks one by one leads " <>
        "to the same GState as verifying and applying them all at once " <>
        "as well as applying in chunks"

----------------------------------------------------------------------------
-- applyBlocks
----------------------------------------------------------------------------

-- Commented out because tests are slow.
-- We can enable it later if we make tests much faster.

applyBlocksSpec :: Spec
applyBlocksSpec = pass
-- applyBlocksSpec = do
--     prop applyByOneOrAllAtOnceDesc (applyByOneOrAllAtOnce applier)
--   where
--     applier = applyBlocks True Nothing
--     applyByOneOrAllAtOnceDesc =
--         "applying blocks one by one leads to the same GState as " <>
--         "applying them all at once"

----------------------------------------------------------------------------
-- General functions
----------------------------------------------------------------------------

applyByOneOrAllAtOnce
    :: HasConfigurations
    => Genesis.Config
    -> TxpConfiguration
    -> (OldestFirst NE Blund -> BlockTestMode ())
    -> BlockProperty ()
applyByOneOrAllAtOnce genesisConfig txpConfig applier = do
    bpGoToArbitraryState
    blunds <- getOldestFirst <$> bpGenBlocks genesisConfig
                                             txpConfig
                                             Nothing
                                             (EnableTxPayload True)
                                             (InplaceDB False)
    pre (not $ null blunds)
    let blundsNE = OldestFirst (NE.fromList blunds)
    stateAfter1by1 <- lift $ GS.withClonedGState $ do
        mapM_ (applier . one) (getOldestFirst blundsNE)
        dbPureDump
    chunks             <- splitIntoChunks 5 (blunds)
    stateAfterInChunks <- lift $ GS.withClonedGState $ do
        mapM_ (applier . OldestFirst) chunks
        dbPureDump
    stateAfterAllAtOnce <- lift $ do
        applier blundsNE
        dbPureDump
    assert
        (  stateAfter1by1
        == stateAfterInChunks
        && stateAfterInChunks
        == stateAfterAllAtOnce
        )

----------------------------------------------------------------------------
-- Block events
----------------------------------------------------------------------------

blockEventSuccessSpec :: HasStaticConfigurations
                      => TxpConfiguration
                      -> Spec
blockEventSuccessSpec txpConfig =
    blockPropertySpec blockEventSuccessDesc
                      (flip blockEventSuccessProp txpConfig)
  where
    blockEventSuccessDesc =
        "a sequence of interleaved block applications and rollbacks " <>
        "results in the original state of the blockchain"

{- | This generator is carefully designed to cover multitude of success
   scenarios. Apply/rollback are interleaved in various ways, shown by diagrams below:

   0 -----a----> 2
   |             |        Synchronous apply/rollback
   0 <----r----- 2

   0 -a-> 1 -a-> 2
   |             |        Multiple apply per rollback
   0 <----r----- 2

   0 -----a----> 2
   |             |        Multiple rollback per apply
   0 <-r- 1 <-r- 2

   0 -a-> 3 -a-> 6 -a-> 9
   |                    |        Desynchronous apply/rollback
   0 <--r--- 4 <---r--- 9

   Furthermore, it allows nested forks (forks of forks), generates both unique
   and repeated forks, respects the 'blkSecurityParam', and can be used with
   'enrichWithSnapshotChecking'. (I would draw diagrams for these features as
   well, but they're barely readable in the ASCII format). Just trust me that
   this generator gives diverse block event sequences -- I spent an entire night
   and a few sheets of paper trying to figure out how to write it.
-}

genSuccessWithForks :: forall g m . (RandomGen g, Monad m)
                    => Genesis.Config
                    -> BlockEventGenT g m ()
genSuccessWithForks genesisConfig = do
    emitBlockApply BlockApplySuccess $ pathSequence mempty ["0"]
    generateFork "0" []
    emitBlockApply BlockApplySuccess $ pathSequence "0" ["1", "2"]
    generateFork ("0" <> "1" <> "2") []
  where
    generateFork ::
           Path -- base path (from the main chain)
        -> NewestFirst [] Path -- current fork state
        -> BlockEventGenT g m ()
    generateFork basePath rollbackFork = do
        let
            forkLen    = length rollbackFork
            k          = (pcBlkSecurityParam . configProtocolConstants) genesisConfig
            wiggleRoom = fromIntegral k - forkLen
        stopFork <- byChance (if forkLen > 0 then 0.1 else 0)
        if stopFork
            then whenJust (nonEmptyNewestFirst rollbackFork) $
                 emitBlockRollback BlockRollbackSuccess
            else do
                needRollback <-
                    -- forkLen=0                => needRollback 0%
                    -- forkLen=blkSecurityParam => needRollback 100%
                    byChance (realToFrac $ forkLen Ratio.% fromIntegral k)
                if needRollback
                    then do
                        retreat <- getRandomR (1, forkLen)
                        whenJust (nonEmptyNewestFirst rollbackFork) $ \rollbackFork' -> do
                            -- forkLen > 0, therefore retreat > 0
                            let (over _NewestFirst NE.fromList -> before, after) = splitAtNewestFirst retreat rollbackFork'
                            emitBlockRollback BlockRollbackSuccess before
                            generateFork basePath after
                    else do
                        advance <- getRandomR (1, wiggleRoom)
                        relPaths <- OldestFirst <$> replicateM advance generateRelativePath1
                        whenJust (nonEmptyOldestFirst relPaths) $ \relPaths' -> do
                            let
                                curPath = maybe basePath NE.head $ nonEmpty (getNewestFirst rollbackFork)
                                paths = pathSequence curPath relPaths'
                            emitBlockApply BlockApplySuccess paths
                            generateFork basePath (over _NewestFirst toList (toNewestFirst paths) <> rollbackFork)
    generateRelativePath1 :: BlockEventGenT g m Path
    generateRelativePath1 =
        uniform (["rekt", "kek", "mems", "peka"] :: NE Path)

blockPropertyScenarioGen
    :: HasConfigurations
    => Genesis.Config
    -> TxpConfiguration
    -> BlockEventGenT QCGen BlockTestMode ()
    -> BlockProperty BlockScenario
blockPropertyScenarioGen genesisConfig txpConfig m = do
    allSecrets <- getAllSecrets
    let genStakeholders = configBootStakeholders genesisConfig
    g <- pick $ MkGen $ \qc _ -> qc
    lift $ flip evalRandT g $ runBlockEventGenT genesisConfig
                                                txpConfig
                                                allSecrets
                                                genStakeholders
                                                m

prettyScenario :: BlockScenario -> Text
prettyScenario scenario = pretty (fmap (headerHash . fst) scenario)

blockEventSuccessProp
    :: HasConfigurations => Genesis.Config -> TxpConfiguration -> BlockProperty ()
blockEventSuccessProp genesisConfig txpConfig = do
    scenario <- blockPropertyScenarioGen genesisConfig
                                         txpConfig
                                         (genSuccessWithForks genesisConfig)
    let (scenario', checkCount) = enrichWithSnapshotChecking scenario
    when (checkCount <= 0) $ stopProperty $
        "No checks were generated, this is a bug in the test suite: " <>
        prettyScenario scenario'
    runBlockScenarioAndVerify genesisConfig txpConfig scenario'

runBlockScenarioAndVerify
    :: HasConfigurations
    => Genesis.Config
    -> TxpConfiguration
    -> BlockScenario
    -> BlockProperty ()
runBlockScenarioAndVerify genesisConfig txpConfig bs = verifyBlockScenarioResult
    =<< lift (runBlockScenario genesisConfig txpConfig bs)

verifyBlockScenarioResult :: BlockScenarioResult -> BlockProperty ()
verifyBlockScenarioResult = \case
    BlockScenarioFinishedOk -> return ()
    BlockScenarioUnexpectedSuccess -> stopProperty $
        "Block scenario unexpected success"
    BlockScenarioUnexpectedFailure e -> stopProperty $
        "Block scenario unexpected failure: " <>
        pretty e
    BlockScenarioDbChanged d ->
        let DbNotEquivalentToSnapshot snapId dbDiff = d in
        stopProperty $
            "Block scenario resulted in a change to the blockchain" <>
            " relative to the " <> show snapId <> " snapshot:\n" <>
            show dbDiff

----------------------------------------------------------------------------
-- Multi-epoch
----------------------------------------------------------------------------

-- Input: the amount of blocks after crossing.
applyThroughEpochSpec
    :: HasStaticConfigurations
    => TxpConfiguration
    -> Int
    -> Spec
applyThroughEpochSpec txpConfig afterCross =
    blockPropertySpec applyThroughEpochDesc $ \genesisConfig ->
        applyThroughEpochProp genesisConfig txpConfig afterCross
  where
    applyThroughEpochDesc =
      "apply a sequence of blocks that spans through epochs (additional blocks after crossing: " ++
      show afterCross ++ ")"

applyThroughEpochProp :: HasConfigurations
                      => Genesis.Config
                      -> TxpConfiguration
                      -> Int
                      -> BlockProperty ()
applyThroughEpochProp genesisConfig txpConfig afterCross = do
    scenario <- blockPropertyScenarioGen genesisConfig txpConfig $ do
        let
            approachEpochEdge =
                pathSequence mempty . OldestFirst . NE.fromList $
                replicate (fromIntegral (configEpochSlots genesisConfig) - 1) "a"
            crossEpochEdge =
                pathSequence (NE.last $ getOldestFirst approachEpochEdge) $
                OldestFirst . NE.fromList $
                -- 2 blocks to ensure that we cross,
                -- then some additional blocks
                replicate (afterCross + 2) "x"
        emitBlockApply BlockApplySuccess approachEpochEdge
        emitBlockApply BlockApplySuccess crossEpochEdge
    runBlockScenarioAndVerify genesisConfig txpConfig scenario

----------------------------------------------------------------------------
-- Forks
----------------------------------------------------------------------------

singleForkSpec :: HasStaticConfigurations
               => TxpConfiguration
               -> ForkDepth
               -> Spec
singleForkSpec txpConfig fd = blockPropertySpec singleForkDesc
    $ \genesisConfig -> singleForkProp genesisConfig txpConfig fd
  where
    singleForkDesc =
      "a blockchain of length q<=(9.5*k) blocks can switch to a fork " <>
      "of length j>i with a common prefix i, rollback depth d=q-i"

singleForkProp :: HasConfigurations
               => Genesis.Config
               -> TxpConfiguration
               -> ForkDepth
               -> BlockProperty ()
singleForkProp genesisConfig txpConfig fd = do
    scenario <- blockPropertyScenarioGen genesisConfig txpConfig $ genSingleFork genesisConfig fd
    runBlockScenarioAndVerify genesisConfig txpConfig scenario

data ForkDepth = ForkShort | ForkMedium | ForkDeep

genSingleFork :: forall g m . (RandomGen g, Monad m)
              => Genesis.Config -> ForkDepth -> BlockEventGenT g m ()
genSingleFork genesisConfig fd = do
    let k = pcK (configProtocolConstants genesisConfig)
    -- 'd' is how deeply in the chain the fork starts. In other words, it's how many
    -- blocks we're going to rollback (therefore must be >1).
    d <- getRandomR $ case fd of
        ForkShort  -> (1, if k > 1 then k-1 else 1)
        ForkMedium -> (if k > 2 then k - 2 else 1, k+2)
        ForkDeep   -> (k+1, div (k*3) 2 + 1)
    -- the depth must be <=k for a successful rollback.
    let expectSuccess = d <= k
    -- original blockchain max index q<(9.5*k)
    q <- getRandomR (d+1, 9 * k + div k 2)
    let
        -- max index of the common prefix. i>0 because d<q
        i = q-d
    -- fork blockchain max index j>i. the upper bound is arbitrary.
    -- dj=j-i
    dj <- getRandomR (1, d*2)
    -- now we can generate paths:
    --
    -- B0 - B1 - B2 - B3 - B4 - B5 - B6 - B7
    --              \
    --                C3 - C4 - C5 - C6
    --
    -- in this example, q=7, d=5, i=2, dj=4
    let
        nonEmptyCuz r [] = error ("Requirement failed: " <> r)
        nonEmptyCuz _ xs = NE.fromList xs
        commonPrefix = pathSequence mempty $
            OldestFirst . nonEmptyCuz "i > 0" $ replicate i "B"
        originalChain = pathSequence mempty $
            OldestFirst . nonEmptyCuz "q > 0" $ replicate q "B"
        rollbackChain = toNewestFirst . pathSequence (stimes i "B") $
            OldestFirst . nonEmptyCuz "d > 0" $ replicate d "B"
        forkChain = pathSequence (NE.last $ getOldestFirst commonPrefix) $
            OldestFirst . nonEmptyCuz "dj > 0" $ replicate dj "C"
    emitBlockApply BlockApplySuccess originalChain
    if expectSuccess
        then do
            emitBlockRollback BlockRollbackSuccess rollbackChain
            emitBlockApply BlockApplySuccess forkChain
        else do
            emitBlockRollback (BlockRollbackFailure BlkRbSecurityLimitExceeded) rollbackChain
